<% title "New map" %>

<%= content_for :head do %>
  <%= javascript_include_tag "map" %>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
  <link rel="shortcut icon" href="http://cartodb.com/favicon/favicon_32x32.ico" />
  <%= javascript_include_tag "//cartodb.s3.amazonaws.com/embed/wax.g.js" %>
  
  <script type="text/javascript">
    var cartodb_table_name  = "<%= Mapismo.data_table %>",
        cartodb_table_id    = "<%= current_user.data_table_id %>",
        cartodb_user_name   = "<%= current_user.username %>",
          TILEHTTP = "https",
          TILESERVER = "cartodb.com",
          SQL_SERVER = 'cartodb.com',
          global_api_url = '/api/v1/';
    
    var cartodb_sql,
        cartodb_style,
        cartodb_params = [];
    
    // Getting vars
    for (var i = 0, length = cartodb_params.length; i<length; i++) {
      if (cartodb_params[i].search('style=%23') != -1) {
        cartodb_style = cartodb_params[i].replace('style=','');
      }
      if (cartodb_params[i].search('sql=') != -1) {
        cartodb_sql = cartodb_params[i].replace('sql=','');
      }
    }
  </script>
  
  <script type="text/javascript">
    $(function() {

      var cartodbMapOptions = {
        zoom: 2,
        center: new google.maps.LatLng(0,0),
        disableDefaultUI: true,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };

      // Init the map
      var carto_embed_map = new google.maps.Map(document.getElementById("map_cartodb_container"),cartodbMapOptions);

      // Setup your map styles
      $.ajax({
        url:TILEHTTP + '://' + cartodb_user_name + '.' + TILESERVER + '/tiles/' + cartodb_table_name + '/map_metadata',
        type: 'GET',
        dataType: 'jsonp',
        success:function(result){
          map_style = $.parseJSON(result.map_metadata);
          if (map_style!=null) {
            if (map_style.google_maps_base_type=="satellite") {
              carto_embed_map.setOptions({mapTypeId: google.maps.MapTypeId.SATELLITE});
            } else if (map_style.google_maps_base_type=="terrain") {
              carto_embed_map.setOptions({mapTypeId: google.maps.MapTypeId.TERRAIN});
            } else {
              carto_embed_map.setOptions({mapTypeId: google.maps.MapTypeId.ROADMAP});
            }

            // Get coordinates and zoom
            if (map_style.zoom && map_style.longitude && map_style.latitude) {
              carto_embed_map.setZoom(map_style.zoom);
              carto_embed_map.setCenter(new google.maps.LatLng(map_style.latitude,map_style.longitude));
            } else {
              getCartoDBBBox();
            }
          } else {
            getCartoDBBBox();
            carto_embed_map.setOptions({mapTypeId: google.maps.MapTypeId.ROADMAP});
            map_style = {};
            map_style.google_maps_customization_style = [ { stylers: [ { saturation: -65 }, { gamma: 1.52 } ] }, { featureType: "administrative", stylers: [ { saturation: -95 },{ gamma: 2.26 } ] }, { featureType: "water", elementType: "labels", stylers: [ { visibility: "off" } ] }, { featureType: "administrative.locality", stylers: [ { visibility: 'off' } ] }, { featureType: "road", stylers: [ { visibility: "simplified" }, { saturation: -99 }, { gamma: 2.22 } ] }, { featureType: "poi", elementType: "labels", stylers: [ { visibility: "off" } ] }, { featureType: "road.arterial", stylers: [ { visibility: 'off' } ] }, { featureType: "road.local", elementType: "labels", stylers: [ { visibility: 'off' } ] }, { featureType: "transit", stylers: [ { visibility: 'off' } ] }, { featureType: "road", elementType: "labels", stylers: [ { visibility: 'off' } ] },{ featureType: "poi", stylers: [ { saturation: -55 } ] } ];
          }

          // Custom tiles
          carto_embed_map.setOptions({styles: map_style.google_maps_customization_style});
        },
        error: function(e){}
      });
      
      
      // Necessary params for wax and infowindow
      var cartodb_params = {
            cartodb_sql         : cartodb_sql,
            cartodb_style       : cartodb_style,
            cartodb_user_name   : cartodb_user_name,
            cartodb_table_name  : cartodb_table_name,
            cartodb_table_id    : cartodb_table_id,
            cartodb_map         : carto_embed_map,
            cartodb_map_canvas  : 'map_cartodb_container'
          }

      // Add wax interaction
      // addCartoDBInteraction(cartodb_params);

      // Zoom to your geometries
      function getCartoDBBBox() {
        $.ajax({
          method: "GET",
          url: TILEHTTP + '://'+cartodb_user_name+'.' + SQL_SERVER + global_api_url+ 'sql/?q='+escape('select ST_Extent(the_geom) from '+ cartodb_table_name),
          dataType: 'jsonp',
          success: function(data) {
            if (data.rows[0].st_extent!=null) {
              var coordinates = data.rows[0].st_extent.replace('BOX(','').replace(')','').split(',');

              var coor1 = coordinates[0].split(' ');
              var coor2 = coordinates[1].split(' ');
              var bounds = new google.maps.LatLngBounds();

              // Check bounds
              if (coor1[0] >  180
               || coor1[0] < -180
               || coor1[1] >  90
               || coor1[1] < -90
               || coor2[0] >  180
               || coor2[0] < -180
               || coor2[1] >  90
               || coor2[1] < -90) {
                coor1[0] = '-30';
                coor1[1] = '-50';
                coor2[0] = '110';
                coor2[1] =  '80';
              }


              bounds.extend(new google.maps.LatLng(coor1[1],coor1[0]));
              bounds.extend(new google.maps.LatLng(coor2[1],coor2[0]));

              carto_embed_map.fitBounds(bounds);
            }

          },
          error: function(e) {}
        });
      }


      // Wax interaction
      function addCartoDBInteraction(params) {
        var currentCartoDbId,
            tilejson = generateTileJson(params);
            infowindow = new CartoDBInfowindow(params);
            cache_buster = 0;
        
        var waxOptions = {
          callbacks: {
            out: function(){
              params.cartodb_map.setOptions({draggableCursor: 'default'});
            },
            over: function(feature, div, opt3, evt){
              params.cartodb_map.setOptions({draggableCursor: 'pointer'});
            },
            click: function(feature, div, opt3, evt){
              infowindow.open(feature,evt.latLng);
            }
          },
          clickAction: 'full'
        };
        
        var wax_tile = new wax.g.connector(tilejson);
        params.cartodb_map.overlayMapTypes.insertAt(0,wax_tile);
        var interaction = wax.g.interaction(params.cartodb_map, tilejson, waxOptions);


        // Generate tilejson
        function generateTileJson(params) {
          var core_url = TILEHTTP + '://' + params.cartodb_user_name + '.' + TILESERVER;  
          var base_url = core_url + '/tiles/' + params.cartodb_table_name + '/{z}/{x}/{y}';
          var tile_url = base_url + '.png?cache_buster=0';
          var grid_url = base_url + '.grid.json';
      
          // SQL?
          if (params.cartodb_sql) {
            var query = 'sql=' + params.cartodb_sql;
            tile_url = wax.util.addUrlData(tile_url, query);
            grid_url = wax.util.addUrlData(grid_url, query);
          }

          // Style
          if (params.cartodb_style) {
            var style = 'style=' + params.cartodb_style;
            tile_url = wax.util.addUrlData(tile_url,style);
            grid_url = wax.util.addUrlData(grid_url,style);
          }

      
          // Build up the tileJSON
          return {
            blankImage: TILEHTTP + '://cartodb.s3.amazonaws.com/embed/blank_tile.png', 
            tilejson: '1.0.0',
            scheme: 'xyz',
            tiles: [tile_url],
            grids: [grid_url],
            tiles_base: tile_url,
            grids_base: grid_url,
            formatter: function(options, data) {
                currentCartoDbId = data.cartodb_id;
                return data.cartodb_id;
            },
            cache_buster: function(){
                return params.cache_buster;
            }
          };
        };
      };

      // Zoom bindings
      $('a.cartodb_map_embed_zoom_in').click(function(ev){
        ev.preventDefault();
        carto_embed_map.setZoom(carto_embed_map.getZoom()+1);
      });
      $('a.cartodb_map_embed_zoom_out').click(function(ev){
        ev.preventDefault();
        carto_embed_map.setZoom(carto_embed_map.getZoom()-1);
      });
    });
  </script>
  
<% end %>

<header id="top_bar">
  Creating a map 
  with <a href="#" data-type="what"></a>
  in <a href="#" data-type="where"></a> 
  on <a href="#" data-type="when"></a>
  
  <a href="#" class="button">Go</a>
</header>

<%= form_for :map, url: maps_path do |f|%>

<input type="hidden" name="map[name]" value="" id="map_name" />
<div class="save_bar">
  Done?
  <a href="#" class="button">Save map</a>
</div>

<div class="popover what">
  <h2>What</h2>
  
  <div class="social_networks">
    <label for="twitter" class="twitter">
      <span>Twitter</span>
      <input name="map[sources][]" type="hidden" value="" />
      <input name="map[sources][]" type="checkbox" value="twitter" id="twitter"/>
    </label>
    <label for="flickr" class="flickr">
      <span>Flickr</span>
      <input name="map[sources][]" type="hidden" value="" />
      <input name="map[sources][]" type="checkbox" value="flickr" id="flickr"/>
    </label>
    <label for="instagram" class="instagram">
      <span>Instagram</span>
      <input name="map[sources][]" type="hidden" value="" />
      <input name="map[sources][]" type="checkbox" value="instagram" id="instagram"/>
    </label>
  </div>
  
  <div class="keywords">
    <label for="keywords">With these words</label>
    <input type="text" id="new_keyword" />
    <ul id="keywords_list" class="keywords_list"></ul>
  </div>
  <input id="map_keywords" name="map[keywords]" type="hidden" value="" />
</div>

<div class="popover where">
  <h2>Where</h2>
  
  <div class="location">
    <input id="map_location_name" name="map[location_name]" size="30" type="text" value="" />
  </div>
  <div id="radius-picker"></div>
  
  <input id="map_lat" name="map[lat]" type="hidden" value="0.0" />
  <input id="map_lon" name="map[lon]" type="hidden" value="0.0" />
  <input id="map_radius" name="map[radius]" type="hidden" value="1000" />
</div>

<div class="popover when">
  <h2>When</h2>
  
  <div class="from">
    <label for="from_day">From</label>
    <input type="text" id="from_day" class="day" />
    <input type="text" id="from_time" class="time" />
  </div>
  <div class="to">
    <label for="to_day">To</label>
    <input type="text" id="to_day" class="day" />
    <input type="text" id="to_time" class="time" />
  </div>
  <input id="map_start_date" name="map[start_date]" type="hidden" value="" />
  <input id="map_end_date" name="map[end_date]" type="hidden" value="" />
</div>
<% end %>

<div id="outer_map_cartodb_container">
  <div id="map_cartodb_container"></div>
</div>

<span class="cartodb_map_controls">
  <a href="#zoom_in" class="cartodb_map_embed_zoom_in">+</a>
  <a href="#zoom_out" class="cartodb_map_embed_zoom_out">-</a>
</span>

<%= content_for :js do %>
  MAPISMO.newMap.initMapValues();
  MAPISMO.newMap.initDOM();
<% end %>